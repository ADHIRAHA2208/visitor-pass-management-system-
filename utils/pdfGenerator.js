const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

// Generate visitor pass PDF
const generateVisitorPassPDF = (passData, visitorData, hostData) => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({
        size: 'A4',
        margin: 50
      });

      const buffers = [];
      doc.on('data', buffers.push.bind(buffers));
      doc.on('end', () => {
        const pdfData = Buffer.concat(buffers);
        resolve(pdfData);
      });

      // Header
      doc.fontSize(20).text('VISITOR PASS', { align: 'center' });
      doc.moveDown();

      // Organization info
      doc.fontSize(14).text('Organization: Visitor Pass Management System', { align: 'center' });
      doc.moveDown();

      // Pass details
      doc.fontSize(12);
      doc.text(`Pass Number: ${passData.passNumber}`);
      doc.text(`Issue Date: ${passData.issuedAt.toLocaleDateString()}`);
      doc.text(`Valid From: ${passData.validFrom.toLocaleDateString()}`);
      doc.text(`Valid To: ${passData.validTo.toLocaleDateString()}`);
      doc.moveDown();

      // Visitor information
      doc.fontSize(14).text('Visitor Information:', { underline: true });
      doc.moveDown(0.5);
      doc.fontSize(12);
      doc.text(`Name: ${visitorData.name}`);
      doc.text(`Email: ${visitorData.email}`);
      doc.text(`Phone: ${visitorData.phone}`);
      if (visitorData.company) {
        doc.text(`Company: ${visitorData.company}`);
      }
      doc.text(`Purpose: ${visitorData.purpose}`);
      doc.moveDown();

      // Host information
      doc.fontSize(14).text('Host Information:', { underline: true });
      doc.moveDown(0.5);
      doc.fontSize(12);
      doc.text(`Name: ${hostData.name}`);
      doc.text(`Email: ${hostData.email}`);
      if (hostData.department) {
        doc.text(`Department: ${hostData.department}`);
      }
      doc.moveDown();

      // Terms and conditions
      doc.fontSize(10);
      doc.text('Terms and Conditions:', { underline: true });
      doc.moveDown(0.5);
      doc.text('1. This pass is valid only for the specified dates and times.');
      doc.text('2. Visitors must check-in and check-out using the QR code.');
      doc.text('3. Any misuse of this pass will result in immediate revocation.');
      doc.text('4. Please carry a valid ID proof at all times.');
      doc.moveDown();

      // Footer
      doc.fontSize(8);
      doc.text('Generated by Visitor Pass Management System', { align: 'center' });
      doc.text(`Generated on: ${new Date().toLocaleString()}`, { align: 'center' });

      doc.end();
    } catch (error) {
      reject(error);
    }
  });
};

// Generate visitor badge PDF (smaller format)
const generateVisitorBadgePDF = (passData, visitorData) => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({
        size: [300, 200], // Badge size
        margin: 20
      });

      const buffers = [];
      doc.on('data', buffers.push.bind(buffers));
      doc.on('end', () => {
        const pdfData = Buffer.concat(buffers);
        resolve(pdfData);
      });

      // Header
      doc.fontSize(16).text('VISITOR', { align: 'center' });
      doc.moveDown();

      // Visitor photo placeholder (if available)
      if (visitorData.photo) {
        // In a real implementation, you would add the image here
        doc.text('[PHOTO]', { align: 'center' });
        doc.moveDown();
      }

      // Visitor details
      doc.fontSize(12);
      doc.text(visitorData.name, { align: 'center' });
      doc.fontSize(10);
      doc.text(visitorData.company || 'N/A', { align: 'center' });
      doc.text(`Pass: ${passData.passNumber}`, { align: 'center' });
      doc.text(`Valid: ${passData.validFrom.toLocaleDateString()}`, { align: 'center' });

      doc.end();
    } catch (error) {
      reject(error);
    }
  });
};

module.exports = {
  generateVisitorPassPDF,
  generateVisitorBadgePDF
};
